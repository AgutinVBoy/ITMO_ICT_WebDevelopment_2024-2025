{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041f\u0438\u043e\u0442\u0443\u0445\u043e\u0432\u0441\u043a\u0438\u0439 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447 K3341 WEB 2.2 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438.","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#k3341-web-22","text":"","title":"\u041f\u0438\u043e\u0442\u0443\u0445\u043e\u0432\u0441\u043a\u0438\u0439 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447 K3341 WEB 2.2"},{"location":"#_1","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: - \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0422\u0430\u043a \u043a\u0430\u043a \u0443 \u043d\u0430\u0441 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b UPD , \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e. \u041a\u043b\u0438\u0435\u043d\u0442: import socket HOST = \"localhost\" PORT = 8080 BUFFER_SIZE = 1024 client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) client.sendto(\"Hello, server\".encode(), (HOST, PORT)) response, server_address = client.recvfrom(BUFFER_SIZE) decoded_data = response.decode() print(decoded_data) client.close() HOST - \u0430\u0434\u0440\u0435\u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 PORT - \u043f\u043e\u0440\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 BUFFER_SIZE - \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u044b \u0447\u0438\u0442\u0430\u0435\u043c \u0437\u0430 \u0440\u0430\u0437 \u0422\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b UDP \u043d\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0438 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438, \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e. \u041c\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0441\u043e\u043a\u0435\u0442\u0430 (client), \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u044f \u0435\u043c\u0443 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 AF_INET (\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u0435\u0442\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 IPv4) \u0438 SOCK_DGRAM (\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP). \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0434\u0430\u0442\u0430\u0433\u0440\u0430\u043c\u043c\u0443 \u0441 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0432 UTF-8 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u044b \u0447\u0438\u0442\u0430\u0435\u043c \u0438\u0437 \u043d\u0430\u0448\u0435\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u0441\u043e\u043a\u0435\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 .recvfrom , \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0435\u0433\u043e \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0412 \u043a\u043e\u043d\u0446\u0435 \u043c\u044b \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0441\u043e\u043a\u0435\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 .close . \u0421\u0435\u0440\u0432\u0435\u0440: import socket HOST = \"localhost\" PORT = 8080 BUFFER_SIZE = 1024 server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server.bind((HOST, PORT)) print(\"Server is running\") while True: data, client_address = server.recvfrom(BUFFER_SIZE) decoded_data = data.decode() print(decoded_data) server.sendto(\"Hello, client\".encode(), client_address) if decoded_data == \"stop_server\": break server.close() HOST - \u0430\u0434\u0440\u0435\u0441 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f PORT - \u043f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f BUFFER_SIZE - \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u044b \u0447\u0438\u0442\u0430\u0435\u043c \u0437\u0430 \u0440\u0430\u0437 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: - \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP - \u0417\u0430\u0434\u0430\u0447\u0430 \u043f\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0443: \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c TCP , \u0430 \u043d\u0435 UDP. \u042d\u0442\u043e\u0442 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0438 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u041f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 .connect() . \u041a\u043b\u0438\u0435\u043d\u0442: import json import socket HOST = \"localhost\" PORT = 8080 BUFFER_SIZE = 1024 a, b, h = map( lambda x: float(x.strip()), input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u044b \u0434\u0432\u0443\u0445 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0439 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438 \u0438 \u0432\u044b\u0441\u043e\u0442\u0443. \\n\u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u044f\u0442\u043e\u0439.\\n\").strip().split(\",\"), ) client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect((HOST, PORT)) client.send(json.dumps(dict(a=a, b=b, h=h)).encode()) response = client.recv(BUFFER_SIZE) area = float(response.decode()) print(f\"\u041f\u043b\u043e\u0449\u0430\u0434\u044c = {area}\") client.close() \u0421\u0435\u0440\u0432\u0435\u0440: import json import socket HOST = \"localhost\" PORT = 8080 BUFFER_SIZE = 1024 MAX_CONNECTIONS = 10 def calculate_area_trapezoid(a, b, h): return (a + b) * h / 2 server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((HOST, PORT)) server.listen(MAX_CONNECTIONS) print(\"Server is running\") while True: client, _ = server.accept() data = client.recv(BUFFER_SIZE) if data == \"stop_server\": break j = json.loads(data) a, b, h = j[\"a\"], j[\"b\"], j[\"h\"] area_trapezoid = calculate_area_trapezoid(a, b, h) client.send(f\"{area_trapezoid}\".encode()) server.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html . \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b HTTP , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u043e\u0432\u0435\u0440\u0445 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP . \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043f\u0435\u0446 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438). \u041d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 HTTP/1.1 200 OK \u0438 Content-Type: text/html . \u0421\u0435\u0440\u0432\u0435\u0440: import os import socket HOST = \"localhost\" PORT = 8080 MAX_CONNECTIONS = 10 BUFFER_SIZE = 1024 def load_html_file(filename): if os.path.exists(filename): with open(filename, 'r') as file: return file.read() else: return None server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((HOST, PORT)) server.listen(MAX_CONNECTIONS) print(\"Server is running\") while True: client, _ = server.accept() client.recv(BUFFER_SIZE) html = load_html_file(\"index.html\") if html is not None: response = ( ( \"HTTP/1.1 200 OK\\r\\n\" \"Content-Type: text/html; charset=utf-8\\r\\n\" f\"Content-Length: {len(html)}\\r\\n\" \"\\r\\n\" + html ) ) else: response = ( \"HTTP/1.1 404 Not Found\\r\\n\" \"Content-Type: text/html; charset=utf-8\\r\\n\" \"\\r\\n\" \"<h1>404 Not Found</h1>\" ) client.sendall(response.encode()) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: - \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading - \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b TCP - \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0431\u044b\u043b \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u043a\u043b\u0438\u0435\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u043c\u0435\u0435\u0442 \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c, \u0442\u0430\u043a \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043d\u0438\u043a\u043d\u0435\u0439\u043c \u0438 \u0447\u0430\u0442_\u0430\u0439\u0434\u0438 \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c, \u043a\u0430\u043a \u0435\u043c\u0443 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u0435\u043d\u043e \u043e\u0431\u0449\u0430\u0442\u044c\u0441\u044f \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0438 \u0447\u0438\u0442\u0430\u0442\u044c \u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442: import socket import threading HOST = 'localhost' PORT = 8080 BUFFER_SIZE = 4 def receive_messages(client_socket): while True: try: message_length_data = client_socket.recv(BUFFER_SIZE) if not message_length_data: continue message_length = int.from_bytes(message_length_data, byteorder=\"big\") message = client_socket.recv(message_length).decode('utf-8') if message: print(f\"\\n{message}\") except: print(\"[-] \u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c.\") client_socket.close() break username = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0432\u043e\u0439 \u043d\u0438\u043a\u043d\u0435\u0439\u043c: \") chat_id = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 id \u0447\u0430\u0442\u0430: \") client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((HOST, PORT)) receive_thread = threading.Thread(target=receive_messages, args=(client_socket,)) receive_thread.start() def send_message(client_socket, msg): msg = msg.encode() msg_length = len(msg).to_bytes(BUFFER_SIZE, byteorder='big') client_socket.sendall(msg_length + msg) send_message(client_socket, f\"/setup_nickname {username}\") send_message(client_socket, f\"/join_chat {chat_id}\") while True: try: message = input() if message.lower() == 'exit': client_socket.close() break send_message(client_socket, message) except KeyboardInterrupt: client_socket.close() break \u0421\u0435\u0440\u0432\u0435\u0440 \u0443\u043c\u0435\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0447\u0430\u0442\u0430\u0445 \u0441 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043d\u0438\u043a\u043d\u0435\u0439\u043c\u043e\u0432 \u0438 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043a \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c \u0447\u0430\u0442\u0430\u043c \u043f\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430\u043c. \u041a\u043b\u0438\u0435\u043d\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043d\u0438\u043a\u043d\u0435\u0439\u043c\u0430 ( /setup_nickname ) \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0447\u0430\u0442\u0443 ( /join_chat ), \u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u0435\u0442 \u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u0438\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c \u0442\u043e\u0433\u043e \u0436\u0435 \u0447\u0430\u0442\u0430. \u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u043f\u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0443 TCP , \u0430 \u0434\u043b\u044f \u0438\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0434\u043b\u0438\u043d\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u043f\u0430\u043a\u0435\u0442\u0430. \u0421\u0435\u0440\u0432\u0435\u0440: import socket import threading import typing as tp from dataclasses import dataclass HOST = \"localhost\" PORT = 8080 BUFFER_SIZE = 4 members = [] @dataclass class ChatMember: client_socket: socket chat_id: str = None username: str = None def handle_client(client_socket, client_address): print(f\"[+] \u041d\u043e\u0432\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {client_address}\") members.append(ChatMember(client_socket=client_socket)) while True: try: message_length_data = client_socket.recv(BUFFER_SIZE) if not message_length_data: continue message_length = int.from_bytes(message_length_data, byteorder=\"big\") message = client_socket.recv(message_length).decode('utf-8') if message: member = find_chat_member(client_socket) print(f\"[{client_address} :: {member.username}] {message}\") if message[:16] == \"/setup_nickname \": if message[16:] == \"\": send_message(client_socket, \"[SYSTEM] \u041e\u0448\u0438\u0431\u043a\u0430: \u0432\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0443\u0441\u0442\u043e\u0439 \u043d\u0438\u043a\u043d\u0435\u0439\u043c.\") continue if message[-6:].lower() == \"system\" or message[-5:].lower() == \"(you)\" or message[-4:].lower() in [\"none\", \"null\"]: send_message(client_socket, \"[SYSTEM] \u041e\u0448\u0438\u0431\u043a\u0430: \u0432\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u043d\u0438\u043a\u043d\u0435\u0439\u043c.\") continue old_username = member.username member.username = message[16:] if member.username == old_username: send_message(client_socket, \"[SYSTEM] \u0423 \u0432\u0430\u0441 \u0443\u0436\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u044d\u0442\u043e\u0442 \u043d\u0438\u043a\u043d\u0435\u0439\u043c.\") continue if member.chat_id is not None: broadcast_message(f\"{old_username} \u0441\u043c\u0435\u043d\u0438\u043b \u043d\u0438\u043a\u043d\u0435\u0439\u043c \u043d\u0430 {member.username}\", member.chat_id, None, system_msg=True) continue elif message[:11] == \"/join_chat \": if member.username is None: send_message(client_socket, \"[SYSTEM] \u0427\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0442\u044c\u0441\u044f \u043a \u0447\u0430\u0442\u0443, \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0438\u043a\u043d\u0435\u0439\u043c. \u0412\u0432\u0435\u0434\u0438\u0442\u0435 /setup_nickname <\u0432\u0430\u0448 \u043d\u0438\u043a\u043d\u0435\u0439\u043c>\") continue if message[11:] == \"\": send_message(client_socket, \"[SYSTEM] \u041e\u0448\u0438\u0431\u043a\u0430: \u0432\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0443\u0441\u0442\u043e\u0439 \u0430\u0439\u0434\u0438 \u0447\u0430\u0442\u0430.\") continue old_chat_id = member.chat_id member.chat_id = message[11:] if member.chat_id == old_chat_id: send_message(client_socket, \"[SYSTEM] \u0412\u044b \u0443\u0436\u0435 \u0432 \u044d\u0442\u043e\u043c \u0447\u0430\u0442\u0435.\") continue if old_chat_id is not None: broadcast_message(f\"{member.username} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442.\", old_chat_id, member.client_socket, system_msg=True) broadcast_message(f\"{member.username} \u0437\u0430\u0448\u0451\u043b \u0432 \u0447\u0430\u0442.\", member.chat_id, None, system_msg=True) continue if member.username is None: send_message(client_socket, \"[SYSTEM] \u0427\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0442\u044c\u0441\u044f \u043a \u0447\u0430\u0442\u0443, \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0438\u043a\u043d\u0435\u0439\u043c. \u0412\u0432\u0435\u0434\u0438\u0442\u0435 /setup_nickname <\u0432\u0430\u0448 \u043d\u0438\u043a\u043d\u0435\u0439\u043c>\") elif member.chat_id is None: send_message(client_socket, \"[SYSTEM] \u0412\u044b \u043d\u0435 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0438\u0441\u044c \u043a \u0447\u0430\u0442\u0443. \u0412\u0432\u0435\u0434\u0438\u0442\u0435 /join_chat <\u0447\u0430\u0442_\u0430\u0439\u0434\u0438>\") else: broadcast_message(message, member.chat_id, client_socket) else: break except ConnectionResetError: break print(f\"[-] \u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d {client_address}\") member = find_chat_member(client_socket) if member.chat_id is not None: target_chat_id = member.chat_id members.remove(member) broadcast_message(f\"{member.username} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442.\", target_chat_id, client_socket, system_msg=True) remove_chat_member(client_socket) client_socket.close() def find_chat_member(target_socket) -> tp.Union[ChatMember, None]: for member in members: if member.client_socket == target_socket: return member return None def remove_chat_member(target_socket): for member in members: if member.client_socket == target_socket: members.remove(member) break def broadcast_message(message, chat_id, sender_socket, system_msg: bool = False): sender = find_chat_member(sender_socket) for member in members: if member.chat_id == chat_id: try: full_message = (\"[SYSTEM]\" if system_msg else f\"[{sender.username}{' (You)' if member.client_socket == sender_socket else ''}]\") + f\" {message}\" send_message(member.client_socket, full_message) except: member.client_socket.close() members.remove(member) broadcast_message(f\"{member.username} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442.\", chat_id, client_socket, system_msg=True) def send_message(client_socket, message): msg = message.encode('utf-8') msg_length = len(msg).to_bytes(BUFFER_SIZE, byteorder='big') client_socket.sendall(msg_length + msg) server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((HOST, PORT)) server.listen() print(f\"[*] \u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {HOST}:{PORT}\") while True: client_socket, client_address = server.accept() client_thread = threading.Thread(target=handle_client, args=(client_socket, client_address)) client_thread.start() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python. \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: - \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. - \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0421\u0435\u0440\u0432\u0435\u0440: import http.client import socket import sys from datetime import datetime from urllib.parse import unquote import threading import typing as tp HOST = \"localhost\" PORT = 8080 class Logger: def __init__(self, service: tp.Union[object, str] = None): self.__red = \"\\033[31m\" self.__yellow = \"\\033[33m\" self.__green = \"\\033[32m\" self.__white = \"\\033[37m\" self.__reset = \"\\033[0m\" if service is None: print(\"\u041b\u043e\u0433\u0433\u0435\u0440 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d \u0431\u0435\u0437 \u0438\u043c\u0435\u043d\u0438.\") if isinstance(service, object) and service is not None: self.__service_name = service.__class__.__name__ elif isinstance(service, str): self.__service_name = service else: self.__service_name = \"UnnamedService\" def info(self, msg): print(f\"[{self.__gettime()}] {self.__green}[INFO]{self.__reset} [{self.__service_name}]: {msg}\") def warn(self, msg): print(f\"[{self.__gettime()}] {self.__yellow}[WARN]{self.__reset} [{self.__service_name}]: {msg}\") def error(self, msg): print(f\"{self.__gettime()}] {self.__red}[ERROR]{self.__reset} [{self.__service_name}]: {msg}\") def __gettime(self): return datetime.now().strftime('%d-%m-%Y %H:%M:%S') grades_data = {} class MyHTTPServer: def __init__(self, host, port): self._host = host self._port = port def serve_forever(self): server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: server.bind((self._host, self._port)) server.listen() server.settimeout(1) log.info(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u0430\u0434\u0440\u0435\u0441\u0435 {self._host}:{self._port}\") while True: try: conn, _ = server.accept() client_thread = threading.Thread(target=self.serve_client, args=(conn,), daemon=True) client_thread.start() except socket.timeout: continue except KeyboardInterrupt: break except Exception as e: log.error(f\"\u0427\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a: {e}\") except KeyboardInterrupt: log.warn(\"\u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d \u0432\u0432\u043e\u0434 Ctrl+C\") finally: log.info(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f...\") server.close() def serve_client(self, conn): try: req = self.parse_request(conn) resp, status_code = self.handle_request(req) self.send_response(conn, resp) self.log_request(req, status_code, http.client.responses[status_code]) except ConnectionResetError: conn = None except Exception as e: self.send_error(conn, e) if conn: conn.close() def parse_request(self, conn): rfile = conn.makefile('rb') request_line = rfile.readline().decode('iso-8859-1').strip() method, path, version = request_line.split() headers = self.parse_headers(rfile) content_length = int(headers.get('Content-Length', 0)) body = rfile.read(content_length).decode('iso-8859-1') if content_length else None return { 'method': method, 'path': path, 'version': version, 'headers': headers, 'body': body } def parse_headers(self, rfile): headers = {} while True: line = rfile.readline().decode('iso-8859-1').strip() if not line: break header_name, header_value = line.split(\":\", 1) headers[header_name.strip()] = header_value.strip() return headers def handle_request(self, req): if req['method'] == 'GET' and req['path'] == '/grades': return self.build_response(200, self.render_grades()) elif req['method'] == 'POST' and req['path'] == '/submit': body = req['body'] if body: params = dict(pair.split('=') for pair in body.split('&')) discipline = unquote(params.get('discipline', '')).strip() grade = unquote(params.get('grade', '')).strip() if discipline and grade: grades_data[discipline] = grade return self.build_response(200, self.render_submission_success()) return self.build_response(400, \"Invalid POST request\") else: return self.build_response(404, \"Not Found\") def build_response(self, status_code, body): response_line = f\"HTTP/1.1 {status_code} {http.client.responses[status_code]}\\r\\n\" headers = \"Content-Type: text/html; charset=utf-8\\r\\n\" headers += f\"Content-Length: {len(body.encode('utf-8'))}\\r\\n\" headers += \"Connection: close\\r\\n\" headers += \"\\r\\n\" response = response_line + headers + body return response, status_code def send_response(self, conn, resp): conn.sendall(resp.encode('utf-8')) def send_error(self, conn, err): resp, _ = self.build_response(500, f\"Error: {err}\") self.send_response(conn, resp) conn.close() def render_submission_success(self): return \"\"\" <html><head><meta charset=\"UTF-8\"><title>Submission Success</title></head><body> <h2>Data submitted successfully!</h2> <button onclick=\"window.location.href='/grades'\">Return to Grades</button> </body></html> \"\"\" def render_grades(self): html = \"<html><head><title>\u0417\u0430\u0447\u0451\u0442\u043a\u0430</title></head><body>\" html += \"<h1>\u0417\u0430\u0447\u0451\u0442\u043a\u0430</h1>\" if grades_data: html += \"<ul>\" for discipline, grade in grades_data.items(): html += f\"<li>{discipline}: {grade}</li>\" html += \"</ul>\" else: html += \"\u0412 \u0437\u0430\u0447\u0451\u0442\u043a\u0435 \u043f\u0443\u0441\u0442\u043e. \u041f\u043e\u0447\u0435\u043c\u0443 \u0431\u044b \u044d\u0442\u043e \u043d\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c? ;)\" html += \"<h3>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u044c:</h3>\" html += \"\"\" <form method=\"POST\" action=\"/submit\"> <label for=\"discipline\">\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430:</label> <input type=\"text\" id=\"discipline\" name=\"discipline\"><br> <label for=\"grade\">\u041e\u0446\u0435\u043d\u043a\u0430:</label> <input type=\"text\" id=\"grade\" name=\"grade\"><br> <input type=\"submit\" value=\"\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c\"> </form> \"\"\" html += \"</body></html>\" return html def log_request(self, req, status_code, status_text): log_message = (f\"Request: {req['method']} {req['path']} | \" f\"Response: {status_code} {status_text}\") log.info(log_message) if __name__ == '__main__': host = sys.argv[1] if len(sys.argv) > 2 else HOST port = int(sys.argv[2]) if len(sys.argv) > 2 else PORT serv = MyHTTPServer(HOST, PORT) log = Logger(serv) serv.serve_forever()","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"lab1/#1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438."},{"location":"lab1/#1_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: - \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0422\u0430\u043a \u043a\u0430\u043a \u0443 \u043d\u0430\u0441 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b UPD , \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e. \u041a\u043b\u0438\u0435\u043d\u0442: import socket HOST = \"localhost\" PORT = 8080 BUFFER_SIZE = 1024 client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) client.sendto(\"Hello, server\".encode(), (HOST, PORT)) response, server_address = client.recvfrom(BUFFER_SIZE) decoded_data = response.decode() print(decoded_data) client.close() HOST - \u0430\u0434\u0440\u0435\u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 PORT - \u043f\u043e\u0440\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 BUFFER_SIZE - \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u044b \u0447\u0438\u0442\u0430\u0435\u043c \u0437\u0430 \u0440\u0430\u0437 \u0422\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b UDP \u043d\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0438 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438, \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e. \u041c\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0441\u043e\u043a\u0435\u0442\u0430 (client), \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u044f \u0435\u043c\u0443 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 AF_INET (\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u0435\u0442\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 IPv4) \u0438 SOCK_DGRAM (\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP). \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0434\u0430\u0442\u0430\u0433\u0440\u0430\u043c\u043c\u0443 \u0441 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0432 UTF-8 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u044b \u0447\u0438\u0442\u0430\u0435\u043c \u0438\u0437 \u043d\u0430\u0448\u0435\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u0441\u043e\u043a\u0435\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 .recvfrom , \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0435\u0433\u043e \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0412 \u043a\u043e\u043d\u0446\u0435 \u043c\u044b \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0441\u043e\u043a\u0435\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 .close . \u0421\u0435\u0440\u0432\u0435\u0440: import socket HOST = \"localhost\" PORT = 8080 BUFFER_SIZE = 1024 server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server.bind((HOST, PORT)) print(\"Server is running\") while True: data, client_address = server.recvfrom(BUFFER_SIZE) decoded_data = data.decode() print(decoded_data) server.sendto(\"Hello, client\".encode(), client_address) if decoded_data == \"stop_server\": break server.close() HOST - \u0430\u0434\u0440\u0435\u0441 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f PORT - \u043f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f BUFFER_SIZE - \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u044b \u0447\u0438\u0442\u0430\u0435\u043c \u0437\u0430 \u0440\u0430\u0437","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"lab1/#2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: - \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP - \u0417\u0430\u0434\u0430\u0447\u0430 \u043f\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0443: \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c TCP , \u0430 \u043d\u0435 UDP. \u042d\u0442\u043e\u0442 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0438 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u041f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 .connect() . \u041a\u043b\u0438\u0435\u043d\u0442: import json import socket HOST = \"localhost\" PORT = 8080 BUFFER_SIZE = 1024 a, b, h = map( lambda x: float(x.strip()), input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u044b \u0434\u0432\u0443\u0445 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0439 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438 \u0438 \u0432\u044b\u0441\u043e\u0442\u0443. \\n\u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u044f\u0442\u043e\u0439.\\n\").strip().split(\",\"), ) client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect((HOST, PORT)) client.send(json.dumps(dict(a=a, b=b, h=h)).encode()) response = client.recv(BUFFER_SIZE) area = float(response.decode()) print(f\"\u041f\u043b\u043e\u0449\u0430\u0434\u044c = {area}\") client.close() \u0421\u0435\u0440\u0432\u0435\u0440: import json import socket HOST = \"localhost\" PORT = 8080 BUFFER_SIZE = 1024 MAX_CONNECTIONS = 10 def calculate_area_trapezoid(a, b, h): return (a + b) * h / 2 server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((HOST, PORT)) server.listen(MAX_CONNECTIONS) print(\"Server is running\") while True: client, _ = server.accept() data = client.recv(BUFFER_SIZE) if data == \"stop_server\": break j = json.loads(data) a, b, h = j[\"a\"], j[\"b\"], j[\"h\"] area_trapezoid = calculate_area_trapezoid(a, b, h) client.send(f\"{area_trapezoid}\".encode()) server.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"lab1/#3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html . \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b HTTP , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u043e\u0432\u0435\u0440\u0445 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP . \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043f\u0435\u0446 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438). \u041d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 HTTP/1.1 200 OK \u0438 Content-Type: text/html . \u0421\u0435\u0440\u0432\u0435\u0440: import os import socket HOST = \"localhost\" PORT = 8080 MAX_CONNECTIONS = 10 BUFFER_SIZE = 1024 def load_html_file(filename): if os.path.exists(filename): with open(filename, 'r') as file: return file.read() else: return None server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((HOST, PORT)) server.listen(MAX_CONNECTIONS) print(\"Server is running\") while True: client, _ = server.accept() client.recv(BUFFER_SIZE) html = load_html_file(\"index.html\") if html is not None: response = ( ( \"HTTP/1.1 200 OK\\r\\n\" \"Content-Type: text/html; charset=utf-8\\r\\n\" f\"Content-Length: {len(html)}\\r\\n\" \"\\r\\n\" + html ) ) else: response = ( \"HTTP/1.1 404 Not Found\\r\\n\" \"Content-Type: text/html; charset=utf-8\\r\\n\" \"\\r\\n\" \"<h1>404 Not Found</h1>\" ) client.sendall(response.encode())","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"lab1/#4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: - \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading - \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b TCP - \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0431\u044b\u043b \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u043a\u043b\u0438\u0435\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u043c\u0435\u0435\u0442 \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c, \u0442\u0430\u043a \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043d\u0438\u043a\u043d\u0435\u0439\u043c \u0438 \u0447\u0430\u0442_\u0430\u0439\u0434\u0438 \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c, \u043a\u0430\u043a \u0435\u043c\u0443 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u0435\u043d\u043e \u043e\u0431\u0449\u0430\u0442\u044c\u0441\u044f \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0438 \u0447\u0438\u0442\u0430\u0442\u044c \u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442: import socket import threading HOST = 'localhost' PORT = 8080 BUFFER_SIZE = 4 def receive_messages(client_socket): while True: try: message_length_data = client_socket.recv(BUFFER_SIZE) if not message_length_data: continue message_length = int.from_bytes(message_length_data, byteorder=\"big\") message = client_socket.recv(message_length).decode('utf-8') if message: print(f\"\\n{message}\") except: print(\"[-] \u041e\u0448\u0438\u0431\u043a\u0430 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c.\") client_socket.close() break username = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0432\u043e\u0439 \u043d\u0438\u043a\u043d\u0435\u0439\u043c: \") chat_id = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 id \u0447\u0430\u0442\u0430: \") client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((HOST, PORT)) receive_thread = threading.Thread(target=receive_messages, args=(client_socket,)) receive_thread.start() def send_message(client_socket, msg): msg = msg.encode() msg_length = len(msg).to_bytes(BUFFER_SIZE, byteorder='big') client_socket.sendall(msg_length + msg) send_message(client_socket, f\"/setup_nickname {username}\") send_message(client_socket, f\"/join_chat {chat_id}\") while True: try: message = input() if message.lower() == 'exit': client_socket.close() break send_message(client_socket, message) except KeyboardInterrupt: client_socket.close() break \u0421\u0435\u0440\u0432\u0435\u0440 \u0443\u043c\u0435\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0447\u0430\u0442\u0430\u0445 \u0441 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043d\u0438\u043a\u043d\u0435\u0439\u043c\u043e\u0432 \u0438 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043a \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c \u0447\u0430\u0442\u0430\u043c \u043f\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430\u043c. \u041a\u043b\u0438\u0435\u043d\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043d\u0438\u043a\u043d\u0435\u0439\u043c\u0430 ( /setup_nickname ) \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0447\u0430\u0442\u0443 ( /join_chat ), \u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u0435\u0442 \u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u0438\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c \u0442\u043e\u0433\u043e \u0436\u0435 \u0447\u0430\u0442\u0430. \u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u043f\u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0443 TCP , \u0430 \u0434\u043b\u044f \u0438\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0434\u043b\u0438\u043d\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u043f\u0430\u043a\u0435\u0442\u0430. \u0421\u0435\u0440\u0432\u0435\u0440: import socket import threading import typing as tp from dataclasses import dataclass HOST = \"localhost\" PORT = 8080 BUFFER_SIZE = 4 members = [] @dataclass class ChatMember: client_socket: socket chat_id: str = None username: str = None def handle_client(client_socket, client_address): print(f\"[+] \u041d\u043e\u0432\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {client_address}\") members.append(ChatMember(client_socket=client_socket)) while True: try: message_length_data = client_socket.recv(BUFFER_SIZE) if not message_length_data: continue message_length = int.from_bytes(message_length_data, byteorder=\"big\") message = client_socket.recv(message_length).decode('utf-8') if message: member = find_chat_member(client_socket) print(f\"[{client_address} :: {member.username}] {message}\") if message[:16] == \"/setup_nickname \": if message[16:] == \"\": send_message(client_socket, \"[SYSTEM] \u041e\u0448\u0438\u0431\u043a\u0430: \u0432\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0443\u0441\u0442\u043e\u0439 \u043d\u0438\u043a\u043d\u0435\u0439\u043c.\") continue if message[-6:].lower() == \"system\" or message[-5:].lower() == \"(you)\" or message[-4:].lower() in [\"none\", \"null\"]: send_message(client_socket, \"[SYSTEM] \u041e\u0448\u0438\u0431\u043a\u0430: \u0432\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u043d\u0438\u043a\u043d\u0435\u0439\u043c.\") continue old_username = member.username member.username = message[16:] if member.username == old_username: send_message(client_socket, \"[SYSTEM] \u0423 \u0432\u0430\u0441 \u0443\u0436\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u044d\u0442\u043e\u0442 \u043d\u0438\u043a\u043d\u0435\u0439\u043c.\") continue if member.chat_id is not None: broadcast_message(f\"{old_username} \u0441\u043c\u0435\u043d\u0438\u043b \u043d\u0438\u043a\u043d\u0435\u0439\u043c \u043d\u0430 {member.username}\", member.chat_id, None, system_msg=True) continue elif message[:11] == \"/join_chat \": if member.username is None: send_message(client_socket, \"[SYSTEM] \u0427\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0442\u044c\u0441\u044f \u043a \u0447\u0430\u0442\u0443, \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0438\u043a\u043d\u0435\u0439\u043c. \u0412\u0432\u0435\u0434\u0438\u0442\u0435 /setup_nickname <\u0432\u0430\u0448 \u043d\u0438\u043a\u043d\u0435\u0439\u043c>\") continue if message[11:] == \"\": send_message(client_socket, \"[SYSTEM] \u041e\u0448\u0438\u0431\u043a\u0430: \u0432\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0443\u0441\u0442\u043e\u0439 \u0430\u0439\u0434\u0438 \u0447\u0430\u0442\u0430.\") continue old_chat_id = member.chat_id member.chat_id = message[11:] if member.chat_id == old_chat_id: send_message(client_socket, \"[SYSTEM] \u0412\u044b \u0443\u0436\u0435 \u0432 \u044d\u0442\u043e\u043c \u0447\u0430\u0442\u0435.\") continue if old_chat_id is not None: broadcast_message(f\"{member.username} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442.\", old_chat_id, member.client_socket, system_msg=True) broadcast_message(f\"{member.username} \u0437\u0430\u0448\u0451\u043b \u0432 \u0447\u0430\u0442.\", member.chat_id, None, system_msg=True) continue if member.username is None: send_message(client_socket, \"[SYSTEM] \u0427\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0442\u044c\u0441\u044f \u043a \u0447\u0430\u0442\u0443, \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0438\u043a\u043d\u0435\u0439\u043c. \u0412\u0432\u0435\u0434\u0438\u0442\u0435 /setup_nickname <\u0432\u0430\u0448 \u043d\u0438\u043a\u043d\u0435\u0439\u043c>\") elif member.chat_id is None: send_message(client_socket, \"[SYSTEM] \u0412\u044b \u043d\u0435 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0438\u0441\u044c \u043a \u0447\u0430\u0442\u0443. \u0412\u0432\u0435\u0434\u0438\u0442\u0435 /join_chat <\u0447\u0430\u0442_\u0430\u0439\u0434\u0438>\") else: broadcast_message(message, member.chat_id, client_socket) else: break except ConnectionResetError: break print(f\"[-] \u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d {client_address}\") member = find_chat_member(client_socket) if member.chat_id is not None: target_chat_id = member.chat_id members.remove(member) broadcast_message(f\"{member.username} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442.\", target_chat_id, client_socket, system_msg=True) remove_chat_member(client_socket) client_socket.close() def find_chat_member(target_socket) -> tp.Union[ChatMember, None]: for member in members: if member.client_socket == target_socket: return member return None def remove_chat_member(target_socket): for member in members: if member.client_socket == target_socket: members.remove(member) break def broadcast_message(message, chat_id, sender_socket, system_msg: bool = False): sender = find_chat_member(sender_socket) for member in members: if member.chat_id == chat_id: try: full_message = (\"[SYSTEM]\" if system_msg else f\"[{sender.username}{' (You)' if member.client_socket == sender_socket else ''}]\") + f\" {message}\" send_message(member.client_socket, full_message) except: member.client_socket.close() members.remove(member) broadcast_message(f\"{member.username} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442.\", chat_id, client_socket, system_msg=True) def send_message(client_socket, message): msg = message.encode('utf-8') msg_length = len(msg).to_bytes(BUFFER_SIZE, byteorder='big') client_socket.sendall(msg_length + msg) server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((HOST, PORT)) server.listen() print(f\"[*] \u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {HOST}:{PORT}\") while True: client_socket, client_address = server.accept() client_thread = threading.Thread(target=handle_client, args=(client_socket, client_address)) client_thread.start()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"lab1/#5","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python. \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: - \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. - \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0421\u0435\u0440\u0432\u0435\u0440: import http.client import socket import sys from datetime import datetime from urllib.parse import unquote import threading import typing as tp HOST = \"localhost\" PORT = 8080 class Logger: def __init__(self, service: tp.Union[object, str] = None): self.__red = \"\\033[31m\" self.__yellow = \"\\033[33m\" self.__green = \"\\033[32m\" self.__white = \"\\033[37m\" self.__reset = \"\\033[0m\" if service is None: print(\"\u041b\u043e\u0433\u0433\u0435\u0440 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d \u0431\u0435\u0437 \u0438\u043c\u0435\u043d\u0438.\") if isinstance(service, object) and service is not None: self.__service_name = service.__class__.__name__ elif isinstance(service, str): self.__service_name = service else: self.__service_name = \"UnnamedService\" def info(self, msg): print(f\"[{self.__gettime()}] {self.__green}[INFO]{self.__reset} [{self.__service_name}]: {msg}\") def warn(self, msg): print(f\"[{self.__gettime()}] {self.__yellow}[WARN]{self.__reset} [{self.__service_name}]: {msg}\") def error(self, msg): print(f\"{self.__gettime()}] {self.__red}[ERROR]{self.__reset} [{self.__service_name}]: {msg}\") def __gettime(self): return datetime.now().strftime('%d-%m-%Y %H:%M:%S') grades_data = {} class MyHTTPServer: def __init__(self, host, port): self._host = host self._port = port def serve_forever(self): server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: server.bind((self._host, self._port)) server.listen() server.settimeout(1) log.info(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u0430\u0434\u0440\u0435\u0441\u0435 {self._host}:{self._port}\") while True: try: conn, _ = server.accept() client_thread = threading.Thread(target=self.serve_client, args=(conn,), daemon=True) client_thread.start() except socket.timeout: continue except KeyboardInterrupt: break except Exception as e: log.error(f\"\u0427\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a: {e}\") except KeyboardInterrupt: log.warn(\"\u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d \u0432\u0432\u043e\u0434 Ctrl+C\") finally: log.info(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f...\") server.close() def serve_client(self, conn): try: req = self.parse_request(conn) resp, status_code = self.handle_request(req) self.send_response(conn, resp) self.log_request(req, status_code, http.client.responses[status_code]) except ConnectionResetError: conn = None except Exception as e: self.send_error(conn, e) if conn: conn.close() def parse_request(self, conn): rfile = conn.makefile('rb') request_line = rfile.readline().decode('iso-8859-1').strip() method, path, version = request_line.split() headers = self.parse_headers(rfile) content_length = int(headers.get('Content-Length', 0)) body = rfile.read(content_length).decode('iso-8859-1') if content_length else None return { 'method': method, 'path': path, 'version': version, 'headers': headers, 'body': body } def parse_headers(self, rfile): headers = {} while True: line = rfile.readline().decode('iso-8859-1').strip() if not line: break header_name, header_value = line.split(\":\", 1) headers[header_name.strip()] = header_value.strip() return headers def handle_request(self, req): if req['method'] == 'GET' and req['path'] == '/grades': return self.build_response(200, self.render_grades()) elif req['method'] == 'POST' and req['path'] == '/submit': body = req['body'] if body: params = dict(pair.split('=') for pair in body.split('&')) discipline = unquote(params.get('discipline', '')).strip() grade = unquote(params.get('grade', '')).strip() if discipline and grade: grades_data[discipline] = grade return self.build_response(200, self.render_submission_success()) return self.build_response(400, \"Invalid POST request\") else: return self.build_response(404, \"Not Found\") def build_response(self, status_code, body): response_line = f\"HTTP/1.1 {status_code} {http.client.responses[status_code]}\\r\\n\" headers = \"Content-Type: text/html; charset=utf-8\\r\\n\" headers += f\"Content-Length: {len(body.encode('utf-8'))}\\r\\n\" headers += \"Connection: close\\r\\n\" headers += \"\\r\\n\" response = response_line + headers + body return response, status_code def send_response(self, conn, resp): conn.sendall(resp.encode('utf-8')) def send_error(self, conn, err): resp, _ = self.build_response(500, f\"Error: {err}\") self.send_response(conn, resp) conn.close() def render_submission_success(self): return \"\"\" <html><head><meta charset=\"UTF-8\"><title>Submission Success</title></head><body> <h2>Data submitted successfully!</h2> <button onclick=\"window.location.href='/grades'\">Return to Grades</button> </body></html> \"\"\" def render_grades(self): html = \"<html><head><title>\u0417\u0430\u0447\u0451\u0442\u043a\u0430</title></head><body>\" html += \"<h1>\u0417\u0430\u0447\u0451\u0442\u043a\u0430</h1>\" if grades_data: html += \"<ul>\" for discipline, grade in grades_data.items(): html += f\"<li>{discipline}: {grade}</li>\" html += \"</ul>\" else: html += \"\u0412 \u0437\u0430\u0447\u0451\u0442\u043a\u0435 \u043f\u0443\u0441\u0442\u043e. \u041f\u043e\u0447\u0435\u043c\u0443 \u0431\u044b \u044d\u0442\u043e \u043d\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c? ;)\" html += \"<h3>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u044c:</h3>\" html += \"\"\" <form method=\"POST\" action=\"/submit\"> <label for=\"discipline\">\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430:</label> <input type=\"text\" id=\"discipline\" name=\"discipline\"><br> <label for=\"grade\">\u041e\u0446\u0435\u043d\u043a\u0430:</label> <input type=\"text\" id=\"grade\" name=\"grade\"><br> <input type=\"submit\" value=\"\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c\"> </form> \"\"\" html += \"</body></html>\" return html def log_request(self, req, status_code, status_text): log_message = (f\"Request: {req['method']} {req['path']} | \" f\"Response: {status_code} {status_text}\") log.info(log_message) if __name__ == '__main__': host = sys.argv[1] if len(sys.argv) > 2 else HOST port = int(sys.argv[2]) if len(sys.argv) > 2 else PORT serv = MyHTTPServer(HOST, PORT) log = Logger(serv) serv.serve_forever()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"}]}